/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MasterKey as PrismaMasterKey,
  User as PrismaUser,
} from "@prisma/client";

export class MasterKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MasterKeyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.masterKey.count(args);
  }

  async masterKeys(
    args: Prisma.MasterKeyFindManyArgs
  ): Promise<PrismaMasterKey[]> {
    return this.prisma.masterKey.findMany(args);
  }
  async masterKey(
    args: Prisma.MasterKeyFindUniqueArgs
  ): Promise<PrismaMasterKey | null> {
    return this.prisma.masterKey.findUnique(args);
  }
  async createMasterKey(
    args: Prisma.MasterKeyCreateArgs
  ): Promise<PrismaMasterKey> {
    return this.prisma.masterKey.create(args);
  }
  async updateMasterKey(
    args: Prisma.MasterKeyUpdateArgs
  ): Promise<PrismaMasterKey> {
    return this.prisma.masterKey.update(args);
  }
  async deleteMasterKey(
    args: Prisma.MasterKeyDeleteArgs
  ): Promise<PrismaMasterKey> {
    return this.prisma.masterKey.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.masterKey
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
