/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MasterKey } from "./MasterKey";
import { MasterKeyCountArgs } from "./MasterKeyCountArgs";
import { MasterKeyFindManyArgs } from "./MasterKeyFindManyArgs";
import { MasterKeyFindUniqueArgs } from "./MasterKeyFindUniqueArgs";
import { CreateMasterKeyArgs } from "./CreateMasterKeyArgs";
import { UpdateMasterKeyArgs } from "./UpdateMasterKeyArgs";
import { DeleteMasterKeyArgs } from "./DeleteMasterKeyArgs";
import { User } from "../../user/base/User";
import { MasterKeyService } from "../masterKey.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MasterKey)
export class MasterKeyResolverBase {
  constructor(
    protected readonly service: MasterKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "read",
    possession: "any",
  })
  async _masterKeysMeta(
    @graphql.Args() args: MasterKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MasterKey])
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "read",
    possession: "any",
  })
  async masterKeys(
    @graphql.Args() args: MasterKeyFindManyArgs
  ): Promise<MasterKey[]> {
    return this.service.masterKeys(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MasterKey, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "read",
    possession: "own",
  })
  async masterKey(
    @graphql.Args() args: MasterKeyFindUniqueArgs
  ): Promise<MasterKey | null> {
    const result = await this.service.masterKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MasterKey)
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "create",
    possession: "any",
  })
  async createMasterKey(
    @graphql.Args() args: CreateMasterKeyArgs
  ): Promise<MasterKey> {
    return await this.service.createMasterKey({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MasterKey)
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "update",
    possession: "any",
  })
  async updateMasterKey(
    @graphql.Args() args: UpdateMasterKeyArgs
  ): Promise<MasterKey | null> {
    try {
      return await this.service.updateMasterKey({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterKey)
  @nestAccessControl.UseRoles({
    resource: "MasterKey",
    action: "delete",
    possession: "any",
  })
  async deleteMasterKey(
    @graphql.Args() args: DeleteMasterKeyArgs
  ): Promise<MasterKey | null> {
    try {
      return await this.service.deleteMasterKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: MasterKey): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
