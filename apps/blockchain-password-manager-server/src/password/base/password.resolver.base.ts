/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Password } from "./Password";
import { PasswordCountArgs } from "./PasswordCountArgs";
import { PasswordFindManyArgs } from "./PasswordFindManyArgs";
import { PasswordFindUniqueArgs } from "./PasswordFindUniqueArgs";
import { CreatePasswordArgs } from "./CreatePasswordArgs";
import { UpdatePasswordArgs } from "./UpdatePasswordArgs";
import { DeletePasswordArgs } from "./DeletePasswordArgs";
import { Vault } from "../../vault/base/Vault";
import { PasswordService } from "../password.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Password)
export class PasswordResolverBase {
  constructor(
    protected readonly service: PasswordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "any",
  })
  async _passwordsMeta(
    @graphql.Args() args: PasswordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Password])
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "any",
  })
  async passwords(
    @graphql.Args() args: PasswordFindManyArgs
  ): Promise<Password[]> {
    return this.service.passwords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Password, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "own",
  })
  async password(
    @graphql.Args() args: PasswordFindUniqueArgs
  ): Promise<Password | null> {
    const result = await this.service.password(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Password)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "create",
    possession: "any",
  })
  async createPassword(
    @graphql.Args() args: CreatePasswordArgs
  ): Promise<Password> {
    return await this.service.createPassword({
      ...args,
      data: {
        ...args.data,

        vault: args.data.vault
          ? {
              connect: args.data.vault,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Password)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "update",
    possession: "any",
  })
  async updatePassword(
    @graphql.Args() args: UpdatePasswordArgs
  ): Promise<Password | null> {
    try {
      return await this.service.updatePassword({
        ...args,
        data: {
          ...args.data,

          vault: args.data.vault
            ? {
                connect: args.data.vault,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Password)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "delete",
    possession: "any",
  })
  async deletePassword(
    @graphql.Args() args: DeletePasswordArgs
  ): Promise<Password | null> {
    try {
      return await this.service.deletePassword(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vault, {
    nullable: true,
    name: "vault",
  })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "any",
  })
  async getVault(@graphql.Parent() parent: Password): Promise<Vault | null> {
    const result = await this.service.getVault(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
