/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Vault } from "./Vault";
import { VaultCountArgs } from "./VaultCountArgs";
import { VaultFindManyArgs } from "./VaultFindManyArgs";
import { VaultFindUniqueArgs } from "./VaultFindUniqueArgs";
import { CreateVaultArgs } from "./CreateVaultArgs";
import { UpdateVaultArgs } from "./UpdateVaultArgs";
import { DeleteVaultArgs } from "./DeleteVaultArgs";
import { PasswordFindManyArgs } from "../../password/base/PasswordFindManyArgs";
import { Password } from "../../password/base/Password";
import { User } from "../../user/base/User";
import { VaultService } from "../vault.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vault)
export class VaultResolverBase {
  constructor(
    protected readonly service: VaultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "any",
  })
  async _vaultsMeta(
    @graphql.Args() args: VaultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vault])
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "any",
  })
  async vaults(@graphql.Args() args: VaultFindManyArgs): Promise<Vault[]> {
    return this.service.vaults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vault, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "own",
  })
  async vault(
    @graphql.Args() args: VaultFindUniqueArgs
  ): Promise<Vault | null> {
    const result = await this.service.vault(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vault)
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "create",
    possession: "any",
  })
  async createVault(@graphql.Args() args: CreateVaultArgs): Promise<Vault> {
    return await this.service.createVault({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vault)
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "update",
    possession: "any",
  })
  async updateVault(
    @graphql.Args() args: UpdateVaultArgs
  ): Promise<Vault | null> {
    try {
      return await this.service.updateVault({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vault)
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "delete",
    possession: "any",
  })
  async deleteVault(
    @graphql.Args() args: DeleteVaultArgs
  ): Promise<Vault | null> {
    try {
      return await this.service.deleteVault(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Password], { name: "passwords" })
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "any",
  })
  async findPasswords(
    @graphql.Parent() parent: Vault,
    @graphql.Args() args: PasswordFindManyArgs
  ): Promise<Password[]> {
    const results = await this.service.findPasswords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Vault): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
