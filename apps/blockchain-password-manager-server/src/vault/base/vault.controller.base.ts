/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VaultService } from "../vault.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VaultCreateInput } from "./VaultCreateInput";
import { Vault } from "./Vault";
import { VaultFindManyArgs } from "./VaultFindManyArgs";
import { VaultWhereUniqueInput } from "./VaultWhereUniqueInput";
import { VaultUpdateInput } from "./VaultUpdateInput";
import { PasswordFindManyArgs } from "../../password/base/PasswordFindManyArgs";
import { Password } from "../../password/base/Password";
import { PasswordWhereUniqueInput } from "../../password/base/PasswordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VaultControllerBase {
  constructor(
    protected readonly service: VaultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vault })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVault(@common.Body() data: VaultCreateInput): Promise<Vault> {
    return await this.service.createVault({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownedBy: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Vault] })
  @ApiNestedQuery(VaultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async vaults(@common.Req() request: Request): Promise<Vault[]> {
    const args = plainToClass(VaultFindManyArgs, request.query);
    return this.service.vaults({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownedBy: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async vault(
    @common.Param() params: VaultWhereUniqueInput
  ): Promise<Vault | null> {
    const result = await this.service.vault({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownedBy: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVault(
    @common.Param() params: VaultWhereUniqueInput,
    @common.Body() data: VaultUpdateInput
  ): Promise<Vault | null> {
    try {
      return await this.service.updateVault({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,
          ownedBy: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVault(
    @common.Param() params: VaultWhereUniqueInput
  ): Promise<Vault | null> {
    try {
      return await this.service.deleteVault({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          ownedBy: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/passwords")
  @ApiNestedQuery(PasswordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "any",
  })
  async findPasswords(
    @common.Req() request: Request,
    @common.Param() params: VaultWhereUniqueInput
  ): Promise<Password[]> {
    const query = plainToClass(PasswordFindManyArgs, request.query);
    const results = await this.service.findPasswords(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        label: true,
        updatedAt: true,
        value: true,

        vault: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "update",
    possession: "any",
  })
  async connectPasswords(
    @common.Param() params: VaultWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        connect: body,
      },
    };
    await this.service.updateVault({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "update",
    possession: "any",
  })
  async updatePasswords(
    @common.Param() params: VaultWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        set: body,
      },
    };
    await this.service.updateVault({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Vault",
    action: "update",
    possession: "any",
  })
  async disconnectPasswords(
    @common.Param() params: VaultWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        disconnect: body,
      },
    };
    await this.service.updateVault({
      where: params,
      data,
      select: { id: true },
    });
  }
}
